#+title: Haskell: The Easy Stuff
#+author: Peter Jones <pjones@devalot.com>
#+startup: content

* Topics and Goals
  :PROPERTIES:
  :ID:       868720b6-d686-4eb8-b855-dccae37b1f4f
  :END:
  1. The primary properties of Ruby and Haskell
  2. Learn the *basics* of Haskell (functions and types)
  3. Haskell lessons for writing better Ruby code
* What is Ruby?
  :PROPERTIES:
  :ID:       f4b8e166-e1a1-406c-b0db-3f4a64b511d0
  :END:
  1. Imperative and object-oriented
  2. Objects are first-class citizens
  3. Nearly everything is mutable
  4. Dynamically typed with a class-based type system
  5. Strict evaluation
  6. Interpreted
* What is Haskell?
  :PROPERTIES:
  :ID:       1d0968dd-4cbb-43a3-8fe4-3d82a092075e
  :END:
  1. Declarative and purely functional
  2. Functions are first-class citizens
  3. Functions are not allowed to have side effects (no state)
  4. Statically typed with a strong type system
  5. Non-strict evaluation (lazy evaluation)
  6. Compiled (native object code) or interpreted
* Haskell Basics
** Syntax
   - Braces and semicolons *or*
   - Layout (use indentation like Python)
** Defining Functions
   - Name and arguments go on the left-hand side of the equals sign
   - The body of the function goes on the right-hand side
   - Functions must produce the same result given the same arguments
   - The only "data" a function can see are its arguments
   - The compiler can infer type information automatically
   - You can also manually specify type information
   - Giving explicit type information gives the compiler something to
     check against (what you expect vs. is really given)
** Function Types and Type Classes
   - When you give type information you can use:
     - Specific types (e.g. Int, Bool)
     - Type variables (e.g. a)
     - Type classes (e.g. Num a =>)
     - That is, functions can be polymorphic
** User Defined Types
   - Some types to review
     1. Bool
     2. Person (user-defined type in [[./src/types.hs][types.hs]])
     3. Maybe
   - Difference between type constructors and value constructors
   - Pattern matching and value constructors
** Some Real World Haskell
   - Implementing the Unix [[./src/wc.hs][wc]] utility
   - [[./src/rps.hs][Rock-paper-scissors]]
* Why I Like Haskell
  :PROPERTIES:
  :ID:       5c1d117f-28c3-4716-b4e9-bb2fb2dfad0d
  :END:
  - Everything is very well thought out
  - The syntax is beautiful and clean
  - The type system is fantastic (type-driven development)
  - Concurrency is a high-priority
  - Function purity makes it easier to reason/understand
  - The best of both worlds (interpreted vs. compiled)
* Writing Better Ruby
  :PROPERTIES:
  :ID:       bd40cdd6-c72f-4336-b7c5-6ffeb785a7b7
  :END:
  - Minimize side effects
  - Use fewer instance variables
  - Write simpler classes with fewer responsibilities
  - Use nil less often?
* Learning Haskell
  :PROPERTIES:
  :ID:       488e9b3e-ec72-4e9b-8973-97376004d885
  :END:
** Recommended Way to Learn Haskell
   1. [[http://learnyouahaskell.com/][Learn You a Haskell]] (buy the book)
   2. [[http://www.haskell.org/haskellwiki/Typeclassopedia][Typeclassopedia]] (dig into Haskell types)
   3. [[http://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/][Why Do Monads Matter?]] (great article)
   4. [[http://www.haskell.org/haskellwiki/All_About_Monads][All About Monads]] (digs into each of the standard monads)
   5. [[http://www.haskell.org/haskellwiki/IO_inside][IO inside]] (understand IO and side effects)
   6. Review [[http://book.realworldhaskell.org/read/][Real World Haskell]] (the online version, watch for typos)
   7. Another checklist covering [[http://acm.wustl.edu/functional/haskell.php][how to learn Haskell]]
** Things to Keep In Mind
   - If Haskell is your first purely functional language it might take
     some time to get out of your imperative skin
   - Haskell is based on abstract mathematical concepts such as
     [[http://en.wikibooks.org/wiki/Haskell/Category_theory][category theory]] so expect to spend some time reviewing math texts
** Getting Help
   - Be sure to join the [[http://www.haskell.org/haskellwiki/IRC_channel][Haskell IRC channel]]
   - Send private messages to [[http://www.haskell.org/haskellwiki/Lambdabot][lambdabot]]
