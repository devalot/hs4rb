#+title: Haskell: The Easy Stuff
#+author: Peter Jones <pjones@devalot.com>
#+startup: content

* Goals
  :PROPERTIES:
  :ID:       868720b6-d686-4eb8-b855-dccae37b1f4f
  :END:
  1. Review Ruby from another perspective
  2. Haskell basics (functions and types)
  3. Write better Ruby code
* What is Ruby?
  :PROPERTIES:
  :ID:       f4b8e166-e1a1-406c-b0db-3f4a64b511d0
  :END:
  - Imperative and object-oriented
  - Objects are first-class citizens
  - Nearly everything is mutable
  - Dynamically typed with a class-based type system
  - Strict evaluation
  - Interpreted
* What is Haskell?
  :PROPERTIES:
  :ID:       1d0968dd-4cbb-43a3-8fe4-3d82a092075e
  :END:
  - Declarative and purely functional
  - Functions are first-class citizens
  - Functions are not allowed to have side effects (no state)
  - Based on abstract mathematics and lambda calculus
  - Statically typed with a strong type system
  - Lazy evaluation (non-strict evaluation)
  - Compiled or interpreted
* Haskell Basics
** Syntax
   - Braces and semicolons *or*
   - Layout (use indentation like Python)
** Defining Functions
   - Name and arguments go on the left hand side of =
   - The function's body goes on the right
   - Functions must produce the same result given the same arguments
   - The only "data" a function sees are its arguments
   - The compiler can infer type information
   - You can also manually specify type information
   - Giving explicit type information gives the compiler something to
     check against
** Function Types and Type Classes
   - When you give type information you can use:
     - Specific types (e.g. Int, Bool)
     - Type variables (e.g. a)
     - Type classes (e.g. Num a =>)
** Some Real World Haskell
   - Implementing the Unix [[./src/wc.hs][wc]] utility
   - [[./src/rps.hs][Rock-paper-scissors]]
* Learning Haskell
  :PROPERTIES:
  :ID:       488e9b3e-ec72-4e9b-8973-97376004d885
  :END:
** Recommended Way to Learn Haskell
   1. [[http://learnyouahaskell.com/][Learn You a Haskell]] (buy the book)
   2. [[http://www.haskell.org/haskellwiki/Typeclassopedia][Typeclassopedia]] (dig into Haskell types)
   3. [[http://www.haskell.org/haskellwiki/All_About_Monads][All About Monads]] (digs into each of the standard monads)
   4. [[http://www.haskell.org/haskellwiki/IO_inside][IO inside]] (understand IO and side effects)
   5. Review [[http://book.realworldhaskell.org/read/][Real World Haskell]] (the online version, watch for typos)
** Things to Keep In Mind
   - If Haskell is your first purely functional language it might take
     some time to get out of your imperative skin
   - Haskell is based on abstract mathematical concepts such as
     [[http://en.wikibooks.org/wiki/Haskell/Category_theory][category theory]] so expect to spend some time reviewing math texts
** Getting Help
   - Be sure to join the [[http://www.haskell.org/haskellwiki/IRC_channel][Haskell IRC channel]]
   - Send private messages to [[http://www.haskell.org/haskellwiki/Lambdabot][lambdabot]]
